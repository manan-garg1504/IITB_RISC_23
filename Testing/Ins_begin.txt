library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use STD.textio.all;
use ieee.std_logic_textio.all;

entity Inst_Mem is 
	port (
		clk, rst, Pause_IF, Branch_Exec, Branch_ID: in std_logic;
		Branch_Addr_Exec, Branch_Addr_ID: in std_logic_vector(15 downto 0);
		Inst_out, Inst_address, Inc_Address: out std_logic_vector(15 downto 0)
	); 
end entity Inst_Mem;

architecture bhv of Inst_Mem is

	type mem is array(63 downto 0) of std_logic_vector(15 downto 0);
	signal Instruction_memory: mem := (others => "0000000000000000");
	signal PC, Inc_PC, next_PC, Inc_input, Inc_output, Pc_Inst, Inc_Inst: std_logic_vector(15 downto 0);

	component Increment is
	port(
		Input: in std_logic_vector(15 downto 0);
		Output: out std_logic_vector(15 downto 0)
	);
	end component;

	file file_Instructs: text;

begin

	process(clk)
		variable v_ILINE: line;
		variable Instruct: std_logic_vector(15 downto 0);
	begin
		if(rst = '1') then
